#+TITLE: Adam Glinski's emacs config
#+AUTHOR: Adam Glinski
#+STARTUP: showeverything
#+OPTIONS: toc:2

* INDEX :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#treemacs][Treemacs]]
  - [[#lsp-stuff][Lsp stuff]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting The Font Face]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disable-menu-bar][Disable Menu Bar]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#setting-custom-theme][Setting custom theme]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-header-bullets][Enabling Header Bullets]]
- [[#which-key][WHICH-KEY]]
- [[#helper-functions][HELPER FUNCTIONS]]
  - [[#reload-emacs][Reload Emacs]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+BEGIN_SRC emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  ;; Uncomment for systems which cannot create symlinks:
  (elpaca-no-symlink-mode)
#+END_SRC

** Load Evil Mode

#+BEGIN_SRC emacs-lisp
    ;; Install use-package support
  (elpaca elpaca-use-package
	  ;; Enable :elpaca use-package keyword.
	  (elpaca-use-package-mode)
	  ;; Assume :elpaca t unless otherwise specified.
	  (setq elpaca-use-package-by-default t))

	;; Block until current queue processed.
	(elpaca-wait)

	;;When installing a package which modifies a form used at the top-level
	;;(e.g. a package which adds a use-package key word),
	;;use `elpaca-wait' to block until that package has been installed/configured.
	;;For example:
	;;(use-package general :demand t)
	;;(elpaca-wait)

	;; Expands to: (elpaca evil (use-package evil :demand t))
	;;(use-package evil :demand t)
	(use-package evil
	  :init
	  (setq evil-want-integration t)
	  (setq evil-want-keybinding nil)
	  (setq evil-vsplit-window-right t)
	  (setq evil-split-window-below t)
	  (evil-mode))

      (use-package evil-collection
	:after evil
	:config
	(setq evil-collection-mode-list '(dashboard dired ibuffer))
	(evil-collection-init))

    (use-package evil-tutor)

      ;;Turns off elpaca-use-package-mode current declartion
	;;Note this will cause the declaration to be interpreted immediately (not deferred).
	;;Useful for configuring built-in emacs features.
	(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

	;; Don't install anything. Defer execution of BODY
	(elpaca nil (message "deferred"))
#+END_SRC

** General Keybindings

#+BEGIN_SRC emacs-lisp

  (use-package general
  :config
  (general-evil-setup)


  ;; setup 'SPC' as leader
  (general-create-definer ag/leader
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC"
  :global-prefix "M-SPC"
  )

  ;; keymapping
  (ag/leader
  "b" '(:ignore t :wk "buffer")
  "b b" '(switch-to-buffer :wk "switch buffer")
  "b i" '(ibuffer :wk "ibuffer")
  "b k" '(kill-this-buffer :wk "kill buffer")
  "b n" '(next-buffer :wk "next buffer")
  "b p" '(previous-buffer :wk "prev buffer")
  "b r" '(revert-buffer :wk "reload buffer")
  )

  ;; TODO: Move later to less "common" mapping
  (ag/leader
  "e" '(:ignore t :wk "evaluate")
  "e b" '(eval-buffer :wk "evaluate elisp in buffer")
  "e r" '(eval-region :wk "evalulate elisp in region")
  )

  (ag/leader
  "f" '(:ignore t :wk "find")
  "f f" '(find-file :wk "find file")
  )

  (ag/leader
  "/" '(comment-line :wk "comment line")
  ";" '(:ignore t :wk "util")
  "; c" '(:ignore t :wk "emacs config")
  "; c e" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "edit emacs config")
  "; c r" '(reload-init-file :wk "reload emacs config")
  )

  ;; TODO: Move later to less "common" mapping
  (ag/leader
  "e" '(:ignore t :wk "evaluate")
  "e b" '(eval-buffer :wk "evaluate elisp in buffer")
  "e r" '(eval-region :wk "evalulate elisp in region")
  )

  (ag/leader
  "f" '(:ignore t :wk "find")
  "f f" '(find-file :wk "find file")
  )

  (ag/leader
  "/" '(comment-line :wk "comment line")
  ";" '(:ignore t :wk "util")
  "; c" '(:ignore t :wk "emacs config")
  "; c e" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "edit emacs config")
  ;; "; c r" '(reload-init-file :wk "reload emacs config")
  "; c r" '((lambda () (interactive) (load-file user-init-file :wk "reload emacs config")))
  )
  )

#+END_SRC

** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+END_SRC
** Lsp stuff
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (java-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm user
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; ;; optional if you want which-key integration
  ;; (use-package which-key
  ;;     :config
  ;;     (which-key-mode))
  (add-hook 'java-mode-hook #'lsp)
#+END_SRC
* FONTS

** Setting The Font Face

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
  :font "RobotoMono Nerd Font"
  :height 150
  :weight 'medium)

  (set-face-attribute 'variable-pitch nil
  :font "RobotoMono Nerd Font"
  :height 120
  :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
  :font "RobotoMono Nerd Font"
  :height 110
  :weight 'medium)

  ;; make comments italic
  ;; (emacsclinet only (not emacs))
  (set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)

  (set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

  ;; set the default font on all graphical frames
  (add-to-list 'default-frame-alist '(font . "RobotoMono Nerd Font-11")) 

  ;; uncomment if line spacing needs adjusting
  (setq-default line-spacing 0.12)
#+END_SRC

* GUI TWEAKS
** Disable Menu Bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Display Line Numbers and Truncated Lines
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

  ;; Sometimes we dont want line numbers
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Setting custom theme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
  :config (load-theme 'gruvbox-dark-medium t)
  )
#+END_SRC

* ORG MODE
** Enabling Table of Contents
#+BEGIN_SRC emacs-lisp
    (use-package toc-org
  :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

** Enabling Header Bullets
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+END_SRC
* WHICH-KEY
#+BEGIN_SRC emacs-lisp
    (use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
  which-key-sort-order #'which-key-key-order-alpha
  which-key-sort-uppercase-first nil
  which-key-add-column-padding 1
  which-key-max-display-columns nil
  which-key-min_display-lines 6
  which-key-side-window-slot -10
  which-key-side-window-max-height 0.25
  which-key-idle-delay 0.8
  which-key-max-description-length 25
  which-key-allow-imprecises-window-fit t
  which-key-separator " > "))
#+END_SRC


* HELPER FUNCTIONS
** Reload Emacs
Yoinked from dt <3
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file)
  )
#+END_SRC
